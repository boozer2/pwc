substitutions:
#  pwc_num: "0"

  # Plant Names
#  plant1_name: Plant $pwc_num-1
#  plant2_name: Plant $pwc_num-2
#  plant3_name: Plant $pwc_num-3
#  plant4_name: Plant $pwc_num-4

  name: "pwc${pwc_num}"
  friendly_name: "Plant Watering Controller ${pwc_num}"
  version: "0.6"
  zone_timeout: "3600s"
  
esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: false
  project:
    name: boozer2.pwc
    version: $version

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

wifi:
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "PWC${pwc_num} Fallback Hotspot"
    password: "xvQA2w6dlf83"

captive_portal:
    
switch:
  - platform: restart
    name: "Reboot Device"
    disabled_by_default: True
    entity_category: diagnostic
  - platform: gpio
    pin:
      number: GPIO23
    name: LED
    id: led
    entity_category: diagnostic
  - platform: template
    name: Full Watering Cycle
    id: pwc${pwc_num}_watering_cycle
    icon: "mdi:water"
    # optimistic: True
    turn_on_action:
      - switch.template.publish:
          id: pwc${pwc_num}_watering_cycle
          state: ON
      - logger.log: "PWC${pwc_num} Watering Cycle Starting"
      - script.execute: water_plant_1
      - script.wait: water_plant_1
      - script.execute: water_plant_2
      - script.wait: water_plant_2
      - script.execute: water_plant_3
      - script.wait: water_plant_3
      - script.execute: water_plant_4
      - script.wait: water_plant_4
      # - switch.turn_on: p1_watering
      # - wait_until:
      #     condition:
      #       switch.is_off: p1_watering
      #     timeout: ${zone_timeout}
      # - if:
      #     condition:
      #       switch.is_on: p1_watering
      #     then:
      #       - logger.log: "PWC${pwc_num} Timeout Waiting for ${plant1_name} to finish watering!"
      #       - switch.turn_off: p1_watering
      # - switch.turn_on: p2_watering
      # - wait_until:
      #     condition:
      #       switch.is_off: p2_watering
      #     timeout: ${zone_timeout}
      # - if:
      #     condition:
      #       switch.is_on: p2_watering
      #     then:
      #       - logger.log: "PWC${pwc_num} Timeout Waiting for ${plant2_name} to finish watering!"
      #       - switch.turn_off: p2_watering
      # - switch.turn_on: p3_watering
      # - wait_until:
      #     condition:
      #       switch.is_off: p3_watering
      #     timeout: ${zone_timeout}
      # - if:
      #     condition:
      #       switch.is_on: p3_watering
      #     then:
      #       - logger.log: "PWC${pwc_num} Timeout Waiting for ${plant3_name} to finish watering!"
      #       - switch.turn_off: p3_watering
      # - switch.turn_on: p4_watering
      # - wait_until:
      #     condition:
      #       switch.is_off: p4_watering
      #     timeout: ${zone_timeout}
      # - if:
      #     condition:
      #       switch.is_on: p4_watering
      #     then:
      #       - logger.log: "PWC${pwc_num} Timeout Waiting for ${plant4_name} to finish watering!"
      #       - switch.turn_off: p4_watering
      - logger.log: "PWC${pwc_num} Watering Cycle Completed"
      # - switch.turn_off: pwc${pwc_num}_watering_cycle
      - switch.template.publish:
          id: pwc${pwc_num}_watering_cycle
          state: OFF
      - lambda: |-
          id(pwc${pwc_num}_watering_cycle_completed_time).publish_state(id(homeassistant_time).now().timestamp.strftime("%Y-%m-%dT%H:%M:%S+00:00"));
    turn_off_action:
      - script.stop: water_plant_1
      - script.stop: water_plant_2
      - script.stop: water_plant_3
      - script.stop: water_plant_4
      - switch.turn_off: p1_watering
      - switch.turn_off: p2_watering
      - switch.turn_off: p3_watering
      - switch.turn_off: p4_watering
      - logger.log: "PWC${pwc_num} Watering Manually Stopped"
      - switch.template.publish:
          id: pwc${pwc_num}_watering_cycle
          state: OFF

sensor:
  - platform: internal_temperature
    name: "Internal Temperature"
  - platform: uptime
    name: Uptime
  - platform: wifi_signal
    name: WiFi Signal dB
  # - platform: template
  #   name: "PWC${pwc_num} Watering Completion Time"
  #   device_class: timestamp
  #   id: pwc${pwc_num}_watering_cycle_completed_time

text_sensor:
  - platform: template
    name: "PWC${pwc_num} Watering Completion Time"
    device_class: timestamp
    id: pwc${pwc_num}_watering_cycle_completed_time

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"

packages:
  plant1: !include
      file: plant.yaml
      vars:
        plant_name: ${plant1_name}
        watering_gpio: GPIO32
        moisture_sensor_gpio: GPIO34
        plant_num: 1
  plant2: !include
      file: plant.yaml
      vars:
        plant_name: ${plant2_name}
        watering_gpio: GPIO33
        moisture_sensor_gpio: GPIO35
        plant_num: 2
  plant3: !include
      file: plant.yaml
      vars:
        plant_name: ${plant3_name}
        watering_gpio: GPIO25
        moisture_sensor_gpio: GPIO36
        plant_num: 3
  plant4: !include
      file: plant.yaml
      vars:
        plant_name: ${plant4_name}
        watering_gpio: GPIO26
        moisture_sensor_gpio: GPIO39        
        plant_num: 4